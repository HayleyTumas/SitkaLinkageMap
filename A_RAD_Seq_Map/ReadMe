STEP 1: Convert output from GenomeStudio to ped, map, and fam files for conversion to vcf file in PLINK.
*This is done for each family separately. Families were analyzed in GenomeStuido separately and fam files made individually.
File: STEP 1 in Data_prep.R

STEP 2: Convert ped, map, and fam files to vcf in PLINK.
File: STEP 1 in Data_prep.sh

STEP 3: Filter data for missingness (SNP and individual) and MAF
3.1: Get missingness and SNP frequency statistics in PLINK.
File: STEP 2 in Data_prep.sh
3.2: Read output files in R to plot histograms and make threshold decisions.
File: STEP 2 in Data_prep.R
3.3: Filter data in plink and output filtered data as vcf files.
File: STEP 2 in Data_prep.R
3.4: Check filtering has worked correctly by outputting statistic files again and checking in R.
Files: STEP 2 in Data_prep.R and Data_prep.sh

STEP 4: Combine both family files into single vcf for LepMap3.
Note: Component maps typically made from individual family vcf files as well.
File: STEP 3 in Data_prep.sh

STEP 5: Get list of sample IDs from each family for pedigree creation for LepMap3 input.
File: STEP 3 in Data_prep.R

STEP 6: During STEP 5 replicate individuals were found in LM1. This is an artifact of the third party we used for DNA extraction.
Any failed extractions were re-done, but some of the initial failed extraction was left on the DNA plate for genotyping.
5.1: Determine the duplicate, failed extractions in R by reading in final vcf files and finding duplicates.
File: STEP 4 in Data_prep.R
5.2: Remove from combined family vcf using vcftools.
*NOTE: these would need to be removed from individual family vcfs as well if component maps are made.
File: STEP 4 in Data_prep.sh

STEP 7: Create pedigree file for LepMap3. The pedigree just identifies the parents and offspring of each family.
File: STEP 5 in Data_prep.R

STEP 8: Read in and convert to LepMap3 format. Further filtering can be performed in LepMap3 for mendelian inconsistencies.
*See LepMap3 wiki
File: Data_Conver.sh

STEP 9: Run LepMap3 using bash scripts. Look at LepMap3 wiki for step explanation. The LepMap3 used here is included in the LepMap3 Update folder. 
9.1: Separate Chromosomes: runSC_local.sh
NOTE: Family 2 (from separate family runs not included here) was determined to have the more realistic chromosome lengths.
For that reason, Family 2 was used to inform Separate Chromosomes. See wiki for parameters. 
9.2: Choose best LodLimit based on results: chk_chr_local.sh
This LodLimit should give the correct number of chromosomes and join the most markers
9.3: Join any un-grouped markers using this LodLimit and JoinSingles: runJS_local.sh
9.4: Choose best LodLimit based on results: chk_chr_JS_local.sh
9.5: Order markers on chromosomes: runOM_local.sh
Each ordering can be run multiple times. See LepMap3 wiki for parameters.
9.6: Pick most likely order: checkliklihood_CHR_local.sh
This is done by log likelihood. The code will automatically pick the highest likelihood and put the file in a separate folder.
You can hand check that these are the correct files.
9.7: Combine the ordered files to create a single map: combine_OM_files.R
NOTE: The final output files from OM just have the order number the original SNP was in.
LepMap3 has code to match the SNP ID to the order number in these files.
However, LepMap3 uses the user provided chromosome and position rather than the given SNPID to ID SNPs in output files.
This is why a unique chromosome/position combo must be given to every SNP in the vcf file.
This was done in my code when the ped and map files were created from the GenomeStudio output.
The code to link all this together is getsnpscall.sh
